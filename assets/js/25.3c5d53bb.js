(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{244:function(e,t,a){"use strict";a.r(t);var n=a(0),r=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"robot-path-planning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#robot-path-planning","aria-hidden":"true"}},[e._v("#")]),e._v(" Robot Path Planning")]),e._v(" "),a("p",[e._v("In general, research on various robots can be divided into three categories\nof "),a("strong",[e._v("design and manufacture")]),e._v(", "),a("strong",[e._v("navigation and guidance")]),e._v(", and their "),a("strong",[e._v("application")]),e._v(".")]),e._v(" "),a("p",[e._v("Whatever the mission of the robot, it doesn't have any impact on the role of navigation and the guidance of the robot. Given the wide extent of research in the field of "),a("strong",[e._v("navigating and guidance")]),e._v(" the robot, it breaks into four general areas of")]),e._v(" "),a("ol",[a("li",[e._v("Positioning")]),e._v(" "),a("li",[e._v("Path planning (routing)")]),e._v(" "),a("li",[e._v("Motion planning (control)")]),e._v(" "),a("li",[e._v("Mapping")])]),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("Internet Search")]),e._v(" "),a("p",[e._v('Even before the development of robots, two well-known issues such as the "Traveling Salesman\nProblem" and "Piano Mover\'s Problem" have been around for many years and have been solved\nin various ways.me case, these applications can be transferred onto the physical robot (or rebuilt) without modifications.')])]),e._v(" "),a("p",[e._v("Generally, a robot must proceed to "),a("strong",[e._v("calculate positions")]),e._v(" for conducting navigation and guidance.\nThese positions could be quantitative (namely, coordinates in terms of unit length) or symbolic\n(such as color signs, etc.).")]),e._v(" "),a("p",[e._v("After this step, the robot should identify a "),a("strong",[e._v("route")]),e._v(" or "),a("strong",[e._v("path")]),e._v(' based on their\ncurrent position, destination position (target) and the perception from the environment (whether\nwith or without a map). How to specify the path is called "path planning".')]),e._v(" "),a("p",[e._v("After identifying path, the robot must be controlled such that it moves along this path. Robot motion control, is\nreferred as "),a("strong",[e._v("motion planning")]),e._v(". Some of the robots, including humanoid robots map their\nenvironment so they can use the map for their next routing purpose.")]),e._v(" "),a("p",[e._v("According to the available information from the environment, robotic path\nplanning can be divided into "),a("strong",[e._v("three")]),e._v(" general categories of path planning in a "),a("strong",[e._v("known environment")]),e._v(",\npath planning in a "),a("strong",[e._v("semi-known environment")]),e._v(", and path planning in an "),a("strong",[e._v("unknown environment")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"map-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Map representations")]),e._v(" "),a("p",[e._v("In order to plan a path, we somehow need to represent the environment in the computer. We differentiate between two complementary approaches: "),a("strong",[e._v("discrete")]),e._v(" ("),a("code",[e._v("Relational representation")]),e._v(") and "),a("strong",[e._v("continuous")]),e._v(" approximations ("),a("code",[e._v("Coordinate-based representation")]),e._v(").")]),e._v(" "),a("img",{attrs:{alt:"map representation",src:"/map-representation.png"}}),e._v(" "),a("p",[e._v("In a "),a("strong",[e._v("discrete approximation")]),e._v(", a map is sub-divided into chunks of equal (e.g., a grid or hexagonal map) or differing sizes (e.g., rooms in a building). The latter maps are also known as "),a("code",[e._v("topological maps")]),e._v(".")]),e._v(" "),a("p",[e._v("Discrete maps lend themselves well to a "),a("code",[e._v("graph")]),e._v(" representation. Here, every chunk of the map corresponds to a vertex (also known as “node”), which are connected by edges, if a robot can navigate from one vertex to the other. Discrete maps are the dominant representation in robotics.")]),e._v(" "),a("h3",{attrs:{id:"types-of-relational-representation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-relational-representation","aria-hidden":"true"}},[e._v("#")]),e._v(" Types of Relational representation")]),e._v(" "),a("h4",{attrs:{id:"view-graph-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#view-graph-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" View graph representations")]),e._v(" "),a("p",[e._v("In view graph representations the nodes are directly associated with the particular sen-\nsor input, called a view, available at a particular location.")]),e._v(" "),a("img",{attrs:{alt:"view representation",src:"/view-representation.png"}}),e._v(" "),a("h4",{attrs:{id:"route-graph-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#route-graph-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Route Graph Representations")]),e._v(" "),a("p",[e._v("A general model for environmental knowledge gained by integrating route information into sur-\nvey knowledge by humans and animals, and also by artificial agents. We adopt it here\nfor graph representations in which the nodes stand for distinctive places induced by\nthe environment. The edges reflect distinctive paths connecting these places, allowing\ntravel from one place to another.")]),e._v(" "),a("img",{attrs:{alt:"route representation",src:"/route-representation.png"}}),e._v(" "),a("p",[e._v("A "),a("strong",[e._v("continuous approximation")]),e._v(" requires the definition of inner (obstacles) and outer boundaries, typically in the form of a polygon, whereas paths can be encoded as sequences of real numbers.")]),e._v(" "),a("p",[e._v("Currently the most common map is the "),a("strong",[e._v("occupancy grid map")]),e._v(". In a grid map, the environment is discretized into squares of arbitrary resolution, e.g. 1cm x 1cm, on which obstacles are marked.")]),e._v(" "),a("h3",{attrs:{id:"types-of-coordinate-based-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-coordinate-based-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Types of Coordinate Based Representations")]),e._v(" "),a("h4",{attrs:{id:"occupancy-based-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#occupancy-based-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Occupancy Based Representations")]),e._v(" "),a("p",[e._v("Occupancy-based representations represent occupied and free parts of space equitably\nby decomposing space into cells and storing for each cell whether it is (at least par-\ntially) occupied or (entirely) free. Typically, the decomposition is independent of the\ndistribution of objects in space and uniform in the sense that all cells have the same\nshape and size.")]),e._v(" "),a("img",{attrs:{alt:"occupancy grid map",src:"/occupancy-grid-map.png"}}),e._v(" "),a("h4",{attrs:{id:"geometric-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#geometric-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Geometric Representations")]),e._v(" "),a("p",[e._v("Geometric representations use parameterized primitive geometric objects, i.e., points,\nlines, curves, planes, etc. For these objects, we will adopt the term geom here. A\ngeometric representation basically consists of a list of geoms describing the boundaries\nof free space located in a single coordinate system. Most approaches used for mobile\nrobots employ a single kind of geom.")]),e._v(" "),a("img",{attrs:{alt:"geometric representation",src:"/geometric-representation.png"}}),e._v(" "),a("h5",{attrs:{id:"landmark-based-representations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#landmark-based-representations","aria-hidden":"true"}},[e._v("#")]),e._v(" Landmark-Based Representations")]),e._v(" "),a("p",[e._v("Landmark-based representations represent the world as a set of salient objects (the\nlandmarks) extracted from the sensor data.")]),e._v(" "),a("img",{attrs:{alt:"landmark representation",src:"/landmark-representatio.png"}}),e._v(" "),a("p",[e._v("There is no "),a("strong",[e._v("silver bullet")]),e._v(", and each application might require a different solution that could be a combination of different map types.")]),e._v(" "),a("h2",{attrs:{id:"simulator-map-representation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simulator-map-representation","aria-hidden":"true"}},[e._v("#")]),e._v(" Simulator Map representation")]),e._v(" "),a("p",[e._v("We will be using Coordinate based representation "),a("code",[e._v("Occupancy Based Representations")]),e._v(" for our simulated environment.")]),e._v(" "),a("p",[e._v("For this we have to form grid , We can also perform planning in pixel basic grid but it takes a lot of computation power and complex map representation.")]),e._v(" "),a("h3",{attrs:{id:"size-of-grid-speed-vs-accuracy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#size-of-grid-speed-vs-accuracy","aria-hidden":"true"}},[e._v("#")]),e._v(" Size of grid ("),a("code",[e._v("Speed")]),e._v(" VS "),a("code",[e._v("Accuracy")]),e._v(")")]),e._v(" "),a("h2",{attrs:{id:"path-planning-algorithms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#path-planning-algorithms","aria-hidden":"true"}},[e._v("#")]),e._v(" Path Planning Algorithms")]),e._v(" "),a("h3",{attrs:{id:"dijkstra’s-algorithm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra’s-algorithm","aria-hidden":"true"}},[e._v("#")]),e._v(" Dijkstra’s algorithm")]),e._v(" "),a("p",[e._v("Dijkstra's algorithm is an algorithm for finding the shortest paths between nodes in a graph, which may represent, for example, road networks")]),e._v(" "),a("h4",{attrs:{id:"dijkstra-s-algorithm-to-find-the-shortest-path-between-a-and-b"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-s-algorithm-to-find-the-shortest-path-between-a-and-b","aria-hidden":"true"}},[e._v("#")]),e._v(" Dijkstra's algorithm to find the shortest path between a and b.")]),e._v(" "),a("img",{attrs:{alt:"/Dijkstra_Animation.gif",src:"/Dijkstra_Animation.gif"}}),e._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("It picks the unvisited vertex with the lowest distance, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.")])]),e._v(" "),a("h4",{attrs:{id:"dijkstra-s-algorithm-path-planning-in-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-s-algorithm-path-planning-in-action","aria-hidden":"true"}},[e._v("#")]),e._v(" Dijkstra's algorithm path planning in action.")]),e._v(" "),a("iframe",{attrs:{height:"400px",width:"100%",src:"https://repl.it/@santoshdahal/pyDijkstras?lite=true",scrolling:"no",frameborder:"no",allowtransparency:"true",allowfullscreen:"true",sandbox:"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"}})])}],!1,null,null,null);r.options.__file="robot-path-planning.md";t.default=r.exports}}]);