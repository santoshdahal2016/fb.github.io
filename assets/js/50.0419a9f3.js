(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{219:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[t._m(0),t._v(" "),a("p",[t._v("In this article, you will learn about Streams Based Input/Output in C++ .")]),t._v(" "),a("p",[t._v("The input/output operations which involve keyboard as input device and screen as output device are known as Console I/O operations . The input/output operations which involve file as input device and output device are known as File I/O operations")]),t._v(" "),a("InPageAds"),t._v(" "),a("p",[t._v("C++ Input/Output implement concept of stream .It is an object-oriented alternative to C's FILE-based streams from the C standard library.Stream is the sequences of bytes or flow of data , which acts as a source from which the input data can be obtained by a program or a destination to which the output data can be sent by the program.")]),t._v(" "),t._m(1),t._v(" "),a("p",[t._v("It is flow of data bytes from a device (e.g Keyboard , disk drive) to main memory")]),t._v(" "),t._m(2),t._v(" "),a("p",[t._v("It is flow of data bytes from main memory (i.e program) to a device")]),t._v(" "),t._m(3),t._v(" "),a("p",[t._v("Stream class is the collection of data and the methods necessary to control and maintain flow of data or stream .These stream class are declared in the header file iostream.h . The different stream class available in C++ are defined in following hierarchical order.")]),t._v(" "),a("img",{attrs:{src:"https://4.bp.blogspot.com/-xPQ53hcDPOA/WPR9iakCZkI/AAAAAAAAAjM/p3yqsgE23IooFSMFhbL11ox6Ucx69XB2gCLcB/s1600/Capture.PNG",alt:"c-stream-class-hierarchy"}}),t._v(" "),t._m(4),t._v(" "),a("p",[t._v("Unformatted I/O operation do not allow user to read or display data in desired format. The unformatted operations supported by C++ are :")]),t._v(" "),t._m(5),t._v(" "),a("p",[t._v("The insertion operator (<<) and extraction operator (>>) are overloaded operations which are used for reading and writing data to/from input/output. The predefined object cout is an object of ostream class. The ostream is said to be connected with standard output devices (i.e screen).The cout is used in conjunction with insertion (<<) operator . The C++ compiler also determines the data type of variable to be output ans selects the appropriate stream insertion operator to display data")]),t._v(" "),a("p",[t._v("Syntax")]),t._v(" "),t._m(6),a("p",[t._v("The predefined object cin is an object of istream class. The istream is said to be connected with standard input devices (i.e keyboard).The cin is used in conjunction with extraction(>>) operator . The C++ compiler also determines the data type of input data ans selects the appropriate stream extraction operator to read data")]),t._v(" "),a("p",[t._v("Syntax")]),t._v(" "),t._m(7),t._m(8),t._v(" "),a("p",[t._v("The class istream defines get() and ostream defines put() to read and display single character")]),t._v(" "),a("p",[t._v("Syntax")]),t._v(" "),t._m(9),t._m(10),t._v(" "),a("p",[t._v("The getline reads the whole line untile the enter key is encountred and write() display the whole line")]),t._v(" "),a("p",[t._v("Syntax")]),t._v(" "),t._m(11),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16)],1)},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"c-input-output-streams"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#c-input-output-streams","aria-hidden":"true"}},[this._v("#")]),this._v(" C++ Input/Output : Streams")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"input-stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#input-stream","aria-hidden":"true"}},[this._v("#")]),this._v(" Input Stream :")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"output-stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#output-stream","aria-hidden":"true"}},[this._v("#")]),this._v(" Output Stream :")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"stream-class-hierarchy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stream-class-hierarchy","aria-hidden":"true"}},[this._v("#")]),this._v(" Stream Class Hierarchy")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"unformatted-i-o-operations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unformatted-i-o-operations","aria-hidden":"true"}},[this._v("#")]),this._v(" Unformatted I/O operations")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"overloaded-operator-and"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overloaded-operator-and","aria-hidden":"true"}},[this._v("#")]),this._v(" Overloaded operator << and >>")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("cout"),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),a("span",{attrs:{class:"token string"}},[t._v('"message"')]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("varialble"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-c line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-c"}},[e("code",[this._v("cin"),e("span",{attrs:{class:"token operator"}},[this._v(">>")]),this._v("varialble"),e("span",{attrs:{class:"token punctuation"}},[this._v(";")]),this._v("\n")])]),this._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[this._v("1")]),e("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"put-and-get-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#put-and-get-functions","aria-hidden":"true"}},[this._v("#")]),this._v(" put() and get() functions")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("cin"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("character_variable"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncin"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("put")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("character_variable"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"getline-and-write-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getline-and-write-function","aria-hidden":"true"}},[this._v("#")]),this._v(" getline() and write() function")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("cin"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getline")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string_variable "),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ncout"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("write")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string "),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" size"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"formatted-console-i-o-operations"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#formatted-console-i-o-operations","aria-hidden":"true"}},[this._v("#")]),this._v(" Formatted Console I/O Operations:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"member-functions-of-ios-class-and-flags"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#member-functions-of-ios-class-and-flags","aria-hidden":"true"}},[this._v("#")]),this._v(" Member Functions of ios class and flags :")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("Member Function")]),t._v(" "),a("th",[t._v("Function")]),t._v(" "),a("th",[t._v("Syntax")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Precision()")]),t._v(" "),a("td",[t._v("It used to set the number of integers displayed after a decimal point.")]),t._v(" "),a("td",[t._v("cout.precision(w);")])]),t._v(" "),a("tr",[a("td",[t._v("width()")]),t._v(" "),a("td",[t._v("The default width of your output will be just enough space to print the  number, character, or string in the output buffer. You can change this  by using width(). Because width() is a member function, it must be  invoked with a cout object. It only changes the width of the very next  output field and then immediately reverts to the default.")]),t._v(" "),a("td",[t._v("cout.width(w);")])]),t._v(" "),a("tr",[a("td",[t._v("setf()")]),t._v(" "),a("td",[t._v("This is another function of ios class which is used to set various flags  used for formatting text in C++ .The function takes two arguments as  follows:cout.setf(argument1 ,argument2) where argument1 is  one of the  formatting flags defined in the class ios , which is used to specify  action on the output and argument2 is known as bit field that specifies  the group to which the formatting flags belongs")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("unsetf()")]),t._v(" "),a("td",[t._v("This is another function of ios class which is used to unset various  flags used for formatting text in C++ .The function takes two arguments  as follows:cout.unsetf(argument1)")]),t._v(" "),a("td")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"list-of-ios-flags"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list-of-ios-flags","aria-hidden":"true"}},[this._v("#")]),this._v(" List of ios flags :")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("table",[a("thead",[a("tr",[a("th",[t._v("Description of format")]),t._v(" "),a("th",[t._v("Flags")]),t._v(" "),a("th",[t._v("Bit field")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Left justified output")]),t._v(" "),a("td",[t._v("ios::left")]),t._v(" "),a("td",[t._v("ios:adjusted")])]),t._v(" "),a("tr",[a("td",[t._v("Right justified output")]),t._v(" "),a("td",[t._v("ios::right")]),t._v(" "),a("td",[t._v("ios:adjusted")])]),t._v(" "),a("tr",[a("td",[t._v("Padding after sign")]),t._v(" "),a("td",[t._v("ios::intrenal")]),t._v(" "),a("td",[t._v("ios:adjusted")])]),t._v(" "),a("tr",[a("td",[t._v("Scientific notation")]),t._v(" "),a("td",[t._v("ios::scientific")]),t._v(" "),a("td",[t._v("ios:floatfield")])]),t._v(" "),a("tr",[a("td",[t._v("Fixed point notation")]),t._v(" "),a("td",[t._v("ios::fixed")]),t._v(" "),a("td",[t._v("ios:floatfield")])]),t._v(" "),a("tr",[a("td",[t._v("Decimal base")]),t._v(" "),a("td",[t._v("ios::dec")]),t._v(" "),a("td",[t._v("ios:basefield")])]),t._v(" "),a("tr",[a("td",[t._v("Octal base")]),t._v(" "),a("td",[t._v("ios::oct")]),t._v(" "),a("td",[t._v("ios:basefield")])]),t._v(" "),a("tr",[a("td",[t._v("Hexadecimal base")]),t._v(" "),a("td",[t._v("ios::hex")]),t._v(" "),a("td",[t._v("ios:basefield")])])])])}],!1,null,null,null);n.options.__file="c-inputoutput-streams.md";e.default=n.exports}}]);